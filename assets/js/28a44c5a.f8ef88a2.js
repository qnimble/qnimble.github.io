"use strict";(self.webpackChunkdoc_source=self.webpackChunkdoc_source||[]).push([[4692],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return d}});var n=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var g=n.createContext({}),p=function(e){var t=n.useContext(g),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},u=function(e){var t=p(e.components);return n.createElement(g.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,g=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=p(r),d=i,c=m["".concat(g,".").concat(d)]||m[d]||s[d]||a;return r?n.createElement(c,l(l({ref:t},u),{},{components:r})):n.createElement(c,l({ref:t},u))}));function d(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,l=new Array(a);l[0]=m;var o={};for(var g in t)hasOwnProperty.call(t,g)&&(o[g]=t[g]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var p=2;p<a;p++)l[p]=r[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},2797:function(e,t,r){r.r(t),r.d(t,{assets:function(){return u},contentTitle:function(){return g},default:function(){return d},frontMatter:function(){return o},metadata:function(){return p},toc:function(){return s}});var n=r(3117),i=r(102),a=(r(7294),r(3905)),l=["components"],o={title:"Triggers",toc_max_heading_level:2},g=void 0,p={unversionedId:"Functions/Triggers",id:"Functions/Triggers",title:"Triggers",description:'The following functions are available for the two Trigger lines. The "X" in a function name must be replaced by the trigger number (1 or 2):',source:"@site/Quarto/Functions/Triggers.md",sourceDirName:"Functions",slug:"/Functions/Triggers",permalink:"/Quarto/Functions/Triggers",draft:!1,tags:[],version:"current",frontMatter:{title:"Triggers",toc_max_heading_level:2},sidebar:"autoSideBar",previous:{title:"LEDs",permalink:"/Quarto/Functions/LEDs"},next:{title:"ADC Timing",permalink:"/Quarto/AppNotes/ADCTiming"}},u={},s=[{value:"triggerMode",id:"triggermode",level:2},{value:"Example",id:"example",level:3},{value:"triggerWrite",id:"triggerwrite",level:2},{value:"Example",id:"example-1",level:3},{value:"triggerRead",id:"triggerread",level:2},{value:"Example",id:"example-2",level:3},{value:"enableInterruptTrigger",id:"enableinterrupttrigger",level:2},{value:"Example",id:"example-3",level:3},{value:"disableInterruptTrigger",id:"disableinterrupttrigger",level:2},{value:"Example",id:"example-4",level:3}],m={toc:s};function d(e){var t=e.components,r=(0,i.Z)(e,l);return(0,a.kt)("wrapper",(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,'The following functions are available for the two Trigger lines. The "X" in a function name must be replaced by the trigger number (1 or 2):'),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#triggermode"},"triggerMode")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#triggerwrite"},"triggerWrite")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#triggerread"},"triggerRead")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#enableinterrupttrigger"},"enableInterruptTrigger")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#disableinterrupttrigger"},"disableInterruptTrigger"))),(0,a.kt)("h2",{id:"triggermode"},"triggerMode"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"void triggerMode(uint8_t pin, uint8_t mode);\n")),(0,a.kt)("p",null,"This function configures the input or output characteristics of a trigger pin.  By default, all triggers are inputs. The function takes the following arguments: "),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"pin"))," Pin should be an integer between 1 and 2, corresponding to trigger 1 and trigger 2 "),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"mode"))," sets the input or output mode. Valid options are:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("em",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"em"},"OUTPUT")),": Standard output pin (3.3V CMOS push-pull)"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("em",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"em"},"OUTPUT_OPENDRAIN")),": Open drain output"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("em",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"em"},"INPUT")),": Standard input (floating) "),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("em",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"em"},"INPUT_PULLUP")),": Input with 22k pull up resistor"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("em",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"em"},"INPUT_PULLDOWN")),": Input with 100k pull down resistor")))),(0,a.kt)("h3",{id:"example"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"triggerMode(1,INPUT);\ntriggerMode(2,OUTPUT);\n")),(0,a.kt)("h2",{id:"triggerwrite"},"triggerWrite"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"void triggerWrite(uint8_t pin, uint8_t value);\n")),(0,a.kt)("p",null,"This function sets a trigger output HIGH or LOW. The function takes the following arguments:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"pin"))," Should be an integer between 1 and 2, corresponding to trigger 1 and trigger 2."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"value"))," set the pin to a 0 or 1. Valid options are:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"LOW")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"HIGH"))))),(0,a.kt)("h3",{id:"example-1"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"triggerWrite(1,LOW);\ntriggerWrite(2,HIGH);\n")),(0,a.kt)("h2",{id:"triggerread"},"triggerRead"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"uint8_t triggerRead(uint8_t pin);\n")),(0,a.kt)("p",null,"The function returns a 0 if the trigger input is low and returns 1 if the trigger is high. The function takes  the following arguments:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"pin"))," Should be an integer between 1 and 2, corresponding to trigger 1 and trigger 2.")),(0,a.kt)("h3",{id:"example-2"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"if triggerRead(1) {\n    //trigger1 is high\n    ...\n} else {\n    //trigger 1 is low\n    ...\n}\n")),(0,a.kt)("h2",{id:"enableinterrupttrigger"},"enableInterruptTrigger"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"void enableInterruptTrigger(uint8_t pin, trigger_edge_t edge, void (*cb_function)(void) );\nvoid enableInterruptTrigger(uint8_t pin, trigger_edge_t edge, void (*cb_function)(void), uint priority );\n")),(0,a.kt)("p",null,"This function configures the trigger to call a function on the rising, or falling, or either edge of the trigger line. The function takes  the following arguments:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"pin"))," Should be an integer between 1 and 2, corresponding to trigger 1 and trigger 2."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"edge"))," Sets the edge sensitivtity of the trigger line. Valid options are:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"FAILLING_EDGE"),(0,a.kt)("li",{parentName:"ul"},"RISING_EDGE"),(0,a.kt)("li",{parentName:"ul"},"BOTH_EDGES"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"cb_function"))," Callback function to run on the rising (or falling) edge of the trigger"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"priority"))," Optional argument to set interrupt priority. Default is 4 for trigger 1 and 5 for trigger 2.  Under most circumstance, this arguments should be skipped.")),(0,a.kt)("h3",{id:"example-3"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"void setup() {  \n  enableInterruptTrigger(1,RISING_DGE, gotTrigger);\n}\n\nvoid gotTrigger(void) {} \n  ...\n}\n")),(0,a.kt)("h2",{id:"disableinterrupttrigger"},"disableInterruptTrigger"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"void disableInterruptTriggerX(uint8_t pin);\n")),(0,a.kt)("p",null,"This function disables the trigger's interrupt function. The function takes  the following arguments:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"pin"))," Should be an integer between 1 and 2, corresponding to trigger 1 and trigger 2.")),(0,a.kt)("h3",{id:"example-4"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"void watchTrigger(bool on) {\n    if (on == true) {\n        enableInterruptTrigger(1,RISING_EDGE, gotTrigger);\n        //call gotTrigger when Trigger 1 goes high\n    } else {\n        disableInterruptTrigger(1); //turn off calling gotTrigger\n    }\n}\n\nvoid gotTrigger(void) {\n      ...\n}\n")))}d.isMDXComponent=!0}}]);