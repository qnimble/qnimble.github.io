"use strict";(self.webpackChunkdoc_source=self.webpackChunkdoc_source||[]).push([[4211],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>h});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},u=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=p(a),c=r,h=d["".concat(s,".").concat(c)]||d[c]||m[c]||o;return a?n.createElement(h,i(i({ref:t},u),{},{components:a})):n.createElement(h,i({ref:t},u))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},8181:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var n=a(7462),r=(a(7294),a(3905));const o={sidebar_label:"Response Time & Servo BW",title:"System Response Time & Servo Bandwidth",hide_title:!1,hide_table_of_contents:!1,keywords:["Latency","ADC","DAC","Servo","Bandwidth"],description:"Understanding the system latency / servo bandwidth from analog to digital and back to analog."},i=void 0,l={unversionedId:"AppNotes/AnalogResponseTime",id:"AppNotes/AnalogResponseTime",title:"System Response Time & Servo Bandwidth",description:"Understanding the system latency / servo bandwidth from analog to digital and back to analog.",source:"@site/Quarto/AppNotes/AnalogResponseTime.md",sourceDirName:"AppNotes",slug:"/AppNotes/AnalogResponseTime",permalink:"/Quarto/AppNotes/AnalogResponseTime",draft:!1,tags:[],version:"current",frontMatter:{sidebar_label:"Response Time & Servo BW",title:"System Response Time & Servo Bandwidth",hide_title:!1,hide_table_of_contents:!1,keywords:["Latency","ADC","DAC","Servo","Bandwidth"],description:"Understanding the system latency / servo bandwidth from analog to digital and back to analog."},sidebar:"autoSideBar",previous:{title:"ADC Timing",permalink:"/Quarto/AppNotes/ADCTiming"},next:{title:"Doubles vs Floats",permalink:"/Quarto/AppNotes/DoubleVsFloat"}},s={},p=[{value:"Overview",id:"overview",level:2},{value:"DAC Update Time",id:"dac-update-time",level:3},{value:"Analog Output Filter",id:"analog-output-filter",level:3},{value:"Analog Input Filter",id:"analog-input-filter",level:3},{value:"ADC Measurement Time",id:"adc-measurement-time",level:3},{value:"Interrupt Latency",id:"interrupt-latency",level:3},{value:"MCU Processing Time",id:"mcu-processing-time",level:3},{value:"Closed Loop Bandwidth / Delay",id:"closed-loop-bandwidth--delay",level:2}],u={toc:p},d="wrapper";function m(e){let{components:t,...a}=e;return(0,r.kt)(d,(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,"The analog response time is the time it takes from when an analog input changes to when a responding analog output can change. How fast this response is sets how fast the ",(0,r.kt)("em",{parentName:"p"},"Quarto")," can respond to a signal change, and thus the servo bandwidth of the ",(0,r.kt)("em",{parentName:"p"},"Quarto"),". This total response time can be broken down into several parts as an analog input goes into the Quarto and makes it way to an analog output:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"DAC Update Latency"),(0,r.kt)("li",{parentName:"ol"},"Analog Output Filter"),(0,r.kt)("li",{parentName:"ol"},"Analog Input Filter"),(0,r.kt)("li",{parentName:"ol"},"ADC Measurement Latency"),(0,r.kt)("li",{parentName:"ol"},"Interrupt Latency"),(0,r.kt)("li",{parentName:"ol"},"MCU Processing Time")),(0,r.kt)("h3",{id:"dac-update-time"},"DAC Update Time"),(0,r.kt)("p",null,"The DAC Update Latency Time is 1\xb5s",(0,r.kt)("sup",{parentName:"p",id:"fnref-dac_measurementtime"},(0,r.kt)("a",{parentName:"sup",href:"#fn-dac_measurementtime",className:"footnote-ref"},"2")),"."),(0,r.kt)("h3",{id:"analog-output-filter"},"Analog Output Filter"),(0,r.kt)("p",null,"The output filter between the DAC and the ",(0,r.kt)("em",{parentName:"p"},"Quarto's")," Analog Output has a bandwidth of 180 kHz",(0,r.kt)("sup",{parentName:"p",id:"fnref-dac_measurementtime"},(0,r.kt)("a",{parentName:"sup",href:"#fn-dac_measurementtime",className:"footnote-ref"},"2")),". While this filter isn't a simple delay circuit, as the delay varies for different frequency components, for frequencies at 100 kHz or below, the delay is 1.2\xb5s."),(0,r.kt)("h3",{id:"analog-input-filter"},"Analog Input Filter"),(0,r.kt)("p",null,"The input filter in front of the Analog Input has a bandwidth of 400 kHz. While this filter isn't a simple delay circuit, as the delay varies for different frequency components, for  frequencies at 100 kHz or below, the delay is 550ns."),(0,r.kt)("h3",{id:"adc-measurement-time"},"ADC Measurement Time"),(0,r.kt)("p",null,"The ADC Measurement Time is 800ns",(0,r.kt)("sup",{parentName:"p",id:"fnref-adc_measurementtime"},(0,r.kt)("a",{parentName:"sup",href:"#fn-adc_measurementtime",className:"footnote-ref"},"1")),"."),(0,r.kt)("h3",{id:"interrupt-latency"},"Interrupt Latency"),(0,r.kt)("p",null,"Please see ",(0,r.kt)("a",{parentName:"p",href:"InterruptLatency"},"Measuring Interrupt Latency App Note")," note for details, but the worst-case interrupt latency is 210ns. "),(0,r.kt)("h3",{id:"mcu-processing-time"},"MCU Processing Time"),(0,r.kt)("p",null,"Clearly this depends on the function that that is executing. In the ",(0,r.kt)("a",{parentName:"p",href:"InterruptLatency"},"Measuring Interrupt Latency App Note")," the processing time was only 160ns. More complex functions will take longer to run. If unsure how long something takes to execute, as done in the app note, can you use a trigger line to measure the execution time with an O-scope. The code would be:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"triggerWrite(1,HIGH); // Set Trigger 1 high at start on function\nfunctiontoTime();\ntriggerWrite(1,LOW); // Set Trigger 1 low after function completes\n")),(0,r.kt)("p",null,"But for straight-forward arithmetic functions (no loops), 500ns is a safe estimate. "),(0,r.kt)("h2",{id:"closed-loop-bandwidth--delay"},"Closed Loop Bandwidth / Delay"),(0,r.kt)("p",null,"In the case of a servo where the ",(0,r.kt)("em",{parentName:"p"},"Quarto's")," analog output is connected to its analog input, then we can measure the delay through the entire closed loop. If at t=0, we look at a signal at the ",(0,r.kt)("em",{parentName:"p"},"Quarto's")," analog input, then that signal gets to the ADC at time 800ns. The interrupt latency adds 210ns, so the MCU gets the data at time 1.01\xb5s. Assuming the MCU takes 290ns to calculate the DAC update value, then at t=1.3\xb5s the MCU updates the DAC. That update hits the DAC output at t=2.3\xb5s and gets through the output filter at 3.5\xb5s and through the ADC input filter at 4.05us. This means that the closed-loop signal delay is 4.05\xb5s. However, this ignores the sampling time of the ADC. If the ADC is sampling every 1\xb5s, then some information is delayed by nearly 1\xb5s before the ADC samples it and other information is barely delayed at all. A reasonable approximation is to assume that all signals are delayed by, on average, half the sampling time. When sampling every 1\xb5s, this adds an additional delay of 500ns. If sampling at 2\xb5s, then the extra delay would be 1\xb5s."),(0,r.kt)("p",null,"Putting this all together, we have a total delay of 4.05\xb5s plus the time between a voltage change event and when the ADC samples that change. This delay is (on average) approximately half the sampling rate. So if you have a 4-channel PID servo, where each channel channel is sampling at 4\xb5s, then that adds 2\xb5s of delay, for a total of 6.05\xb5s. The closed loop oscillation frequency is where the servo has 180\xb0 phase shift, which is when the delay is equal to half the period of oscillation. At 100kHz, one period is 10\xb5s, so oscillations at 100kHz occurs when the delay is 5\xb5s. The table below shows the delay for a few different ADC sampling rates along with the expected servo loop oscillation frequency. "),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"ADC Sample Rate (\xb5s)"),(0,r.kt)("th",{parentName:"tr",align:null},"Max # of PID Loops"),(0,r.kt)("th",{parentName:"tr",align:null},"Total Delay (\xb5s)"),(0,r.kt)("th",{parentName:"tr",align:null},"Expected Oscillation Freq (kHz)"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"4.55"),(0,r.kt)("td",{parentName:"tr",align:null},"110")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"2"),(0,r.kt)("td",{parentName:"tr",align:null},"2"),(0,r.kt)("td",{parentName:"tr",align:null},"5.05"),(0,r.kt)("td",{parentName:"tr",align:null},"100")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"3"),(0,r.kt)("td",{parentName:"tr",align:null},"3"),(0,r.kt)("td",{parentName:"tr",align:null},"5.55"),(0,r.kt)("td",{parentName:"tr",align:null},"90")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"4"),(0,r.kt)("td",{parentName:"tr",align:null},"4"),(0,r.kt)("td",{parentName:"tr",align:null},"6.05"),(0,r.kt)("td",{parentName:"tr",align:null},"82")))),(0,r.kt)("div",{className:"footnotes"},(0,r.kt)("hr",{parentName:"div"}),(0,r.kt)("ol",{parentName:"div"},(0,r.kt)("li",{parentName:"ol",id:"fn-dac_measurementtime"},"See DAC section of ",(0,r.kt)("a",{parentName:"li",href:"../Specifications#digital-to-analog-converter-dac"},"Specifications Page"),".",(0,r.kt)("a",{parentName:"li",href:"#fnref-dac_measurementtime",className:"footnote-backref"},"\u21a9")),(0,r.kt)("li",{parentName:"ol",id:"fn-adc_measurementtime"},"See ADC section of ",(0,r.kt)("a",{parentName:"li",href:"../Specifications#analog-to-digital-converter-adc"},"Specifications Page"),".",(0,r.kt)("a",{parentName:"li",href:"#fnref-adc_measurementtime",className:"footnote-backref"},"\u21a9")))))}m.isMDXComponent=!0}}]);