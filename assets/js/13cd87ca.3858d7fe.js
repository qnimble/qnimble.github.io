"use strict";(self.webpackChunkdoc_source=self.webpackChunkdoc_source||[]).push([[4228],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return c}});var a=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var m=a.createContext({}),s=function(e){var n=a.useContext(m),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=s(e.components);return a.createElement(m.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,m=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=s(t),c=o,g=d["".concat(m,".").concat(c)]||d[c]||p[c]||r;return t?a.createElement(g,i(i({ref:n},u),{},{components:t})):a.createElement(g,i({ref:n},u))}));function c(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,i=new Array(r);i[0]=d;var l={};for(var m in n)hasOwnProperty.call(n,m)&&(l[m]=n[m]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var s=2;s<r;s++)i[s]=t[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},8893:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return m},default:function(){return c},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return p}});var a=t(3117),o=t(102),r=(t(7294),t(3905)),i=["components"],l={id:"Commands",slug:"Commands",title:"Serial Commands",sidebar_position:50,keywords:["Commads","Serial","Examples"],description:"Example for creating commands to interact with the Quarto"},m=void 0,s={unversionedId:"Examples/Commands",id:"Examples/Commands",title:"Serial Commands",description:"Example for creating commands to interact with the Quarto",source:"@site/Quarto/Examples/Commands.md",sourceDirName:"Examples",slug:"/Examples/Commands",permalink:"/Quarto/Examples/Commands",tags:[],version:"current",sidebarPosition:50,frontMatter:{id:"Commands",slug:"Commands",title:"Serial Commands",sidebar_position:50,keywords:["Commads","Serial","Examples"],description:"Example for creating commands to interact with the Quarto"},sidebar:"autoSideBar",previous:{title:"SD Card",permalink:"/Quarto/Examples/SDCard"},next:{title:"List of Software Functions",permalink:"/Quarto/Functions/"}},u={},p=[{value:"Setup",id:"setup",level:2},{value:"Adding Commands",id:"adding-commands",level:2},{value:"Commands with Arguments",id:"commands-with-arguments",level:2},{value:"Getting Numbers",id:"getting-numbers",level:2},{value:"Multiple Arguments",id:"multiple-arguments",level:2},{value:"Full Code",id:"full-code",level:2}],d={toc:p};function c(e){var n=e.components,t=(0,o.Z)(e,i);return(0,r.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"In previous examples, we show how to program the ",(0,r.kt)("em",{parentName:"p"},"Quarto")," to do a task. But often you want to interact with the ",(0,r.kt)("em",{parentName:"p"},"Quarto")," to change settings, read values, etc. So make that process easier we have a library, qCommand, for registering serial commands and mapping them to functions. This let you enter commands of the serial port to change the behavior of the ",(0,r.kt)("em",{parentName:"p"},"Quarto"),". "),(0,r.kt)("h2",{id:"setup"},"Setup"),(0,r.kt)("p",null,"First, we need to include the qCommand library and instantiate it:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},'#include "qCommand.h"\nqCommand qC;\n')),(0,r.kt)("p",null,"Then we want this ",(0,r.kt)("inlineCode",{parentName:"p"},"qC")," object we created to handle incoming Serial data and we put that processing in the ",(0,r.kt)("inlineCode",{parentName:"p"},"loop()")," function so it always processes commands:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"void loop() {\n  qC.readSerial(Serial);\n}\n")),(0,r.kt)("p",null,"With that, we have the basics working. If you load this program on the ",(0,r.kt)("em",{parentName:"p"},"Quarto")," we can type commands on the Serial port and get responses:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">> Hello\n<< Unknown command: Hello\n>> Hi\n<< Unknown command: Hi\n")),(0,r.kt)("p",null,"But at this point, we have no commands registered, so everything we type results in an unknown command. "),(0,r.kt)("h2",{id:"adding-commands"},"Adding Commands"),(0,r.kt)("p",null,"Adding commands looks a little strange at first, but its a very powerful structure. We will map a string (or command) to a function. That function takes two arguments: the qC object and a Stream. A Stream is just a more generalized version of the ",(0,r.kt)("inlineCode",{parentName:"p"},"Serial")," object. It is an object with ",(0,r.kt)("inlineCode",{parentName:"p"},"print")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"println")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"printf")," functions.  It isn't necessary to use, but enables using the same command system over multiple Serial ports. "),(0,r.kt)("p",null,"Here's an example function:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},'void hello(qCommand& qC, Stream& S) {\n    S.println("Hello there.");\n}\n')),(0,r.kt)("p",null,"Now to add that command, we put the following into our ",(0,r.kt)("inlineCode",{parentName:"p"},"setup()")," function and ",(0,r.kt)("inlineCode",{parentName:"p"},"loop")," functions:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},'void setup() {\n    qC.addCommand("Hello", hello);\n}\n\nvoid loop() {\n    qC.readSerial(Serial);\n}\n')),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"addCommand"),' line assigns the string "Hello" to the ',(0,r.kt)("inlineCode",{parentName:"p"},"hello")," function we wrote. The ",(0,r.kt)("inlineCode",{parentName:"p"},"readSerial(Serial)")," is what processes the incoming Serial data. Since the function is in the loop, it gets run over and over and looks for commands on the Serial line. If you want to listen on multiple Serial ports, you just call ",(0,r.kt)("inlineCode",{parentName:"p"},"readSerial"),"  inside the loop function with a different Serial port as the argument."),(0,r.kt)("p",null,"Now, we type into the Serial port, we'll get:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">> Hello\n<< Hello there.\n>> HELLO\n<< Hello there.\n>> hello2\n<< Unknown command: hello2\n")),(0,r.kt)("p",null,"You'll notice that commands are case-insensitive as 'HELLO' works the same as 'Hello'. This is the default, but you can make the commands case sensitive if you run"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"qC.setCaseSensitive(true);\n")),(0,r.kt)("p",null,"before adding any commands. "),(0,r.kt)("h2",{id:"commands-with-arguments"},"Commands with Arguments"),(0,r.kt)("p",null,"A space is used to separate arguments to the commands. To see the next argument, we use the ",(0,r.kt)("inlineCode",{parentName:"p"},"next()")," function. If there isn't another argument, ",(0,r.kt)("inlineCode",{parentName:"p"},"next()")," will return ",(0,r.kt)("inlineCode",{parentName:"p"},"NULL"),". Additionally, the ",(0,r.kt)("inlineCode",{parentName:"p"},"currenct()")," function can be used to get the current argument. Here's an example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},'void hello(qCommand& qC, Stream& S) {\n    if ( qC.next() == NULL) {\n        S.println("Hello.");\n    } else {\n        S.printf("Hello %s, it is nice to meet you.\\n ",qC.current());\n    }\n}\n')),(0,r.kt)("p",null,"And if we want our hello function to respond to both 'Hello' and 'Hi', we simply run ",(0,r.kt)("inlineCode",{parentName:"p"},"addCommand")," a second time:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},'void setup() {\n    qC.addCommand("Hello", hello); \n    qC.addCommand("Hi", hello);\n}\n')),(0,r.kt)("h2",{id:"getting-numbers"},"Getting Numbers"),(0,r.kt)("p",null,"Often your commands will want to take integers and floats as inputs, not just strings. For example, maybe you want the 'gain' command to let you adjust the gain in your servo loop. In the ",(0,r.kt)("a",{parentName:"p",href:"/Quarto/Examples/Servo"},"PID Servo Example"),", but PID parameters including gain are stored as doubles. To convert the string argument to a double, we use the ",(0,r.kt)("inlineCode",{parentName:"p"},"atof")," command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},'double loopGain = 1.021; // global for the gain\nvoid gain(qCommand& qC, Stream& S) {\n    if ( qC.next() != NULL) {\n        loopGain = atof(qC.current());\n    }\n    S.printf("The gain is %e\\n",loopGain); //print gain in scientific notation\n}\n')),(0,r.kt)("p",null,"If we assign this function to the string 'gain' with "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},'qC.addCommand("Gain", gain);\n')),(0,r.kt)("p",null,"then we interact with the variable gain like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">> gain\n<< The gain is 1.010000e+00\n>> gain .1234\n<< The gain is 1.234000e-01\n>> gain\n>> The gain is 1.234000e-01\n")),(0,r.kt)("h2",{id:"multiple-arguments"},"Multiple Arguments"),(0,r.kt)("p",null,"To use multiple arguments for your functions, simply repeat calling ",(0,r.kt)("inlineCode",{parentName:"p"},"qC.next()")," Here's an example that multiplies two numbers together:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},'void multiply(qCommand& qC, Stream& S) {\n    double a,b;\n    if ( qC.next() == NULL) {\n        S.println("The multiply command needs two arguments, none given.");\n        return;\n    } else {\n        a = atof(qC.current());\n    }\n    if ( qC.next() == NULL) {\n        S.println("The multiply command needs two arguments, only one given.");\n        return;\n    } else {\n        b = atof(qC.current());\n    }\n    S.printf("%e times %e is %e\\n",a,b,a*b);\n}\n')),(0,r.kt)("p",null,"If we assign this function the command 'mult', then we get the following behavior:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},">> mult\n<< The multiply command needs two arguments, none given.\n>> mult 1.23\n<< The multiply command needs two arguments, only one given.\n>> mult 1.23 -1e-2\n<< 1.230000e+00 times -1.000000e-02 is -1.230000e-02\n>> mult 1e\n<< The multiply command needs two arguments, only one given.\n>> mult 1.23e0 3.1415\n<< 1.230000e+00 times 3.141500e+00 is 3.864045e+00\n")),(0,r.kt)("h2",{id:"full-code"},"Full Code"),(0,r.kt)("p",null,"Here's the full code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},'#include "qCommand.h"\n\nqCommand qC;\ndouble loopGain = 1.021; // global for the loop gain\n\nvoid setup() {\n    qC.addCommand("Hello", hello);\n    qC.addCommand("Gain", gain);\n    qC.addCommand("Hi", hello);\n    qC.addCommand("Mult", multiply);\n}\n\nvoid loop() {\n    qC.readSerial(Serial);\n}\n\nvoid hello(qCommand& qC, Stream& S) {\n    if ( qC.next() == NULL) {\n        S.println("Hello.");\n    } else {\n        S.printf("Hello %s, it is nice to meet you.\\n ",qC.current());\n    }\n}\n\nvoid gain(qCommand& qC, Stream& S) {\n    if ( qC.next() != NULL) {\n        loopGain = atof(qC.current());\n    }\n    S.printf("The gain is %e\\n",loopGain); //print gain in scientific notation\n}\nvoid multiply(qCommand& qC, Stream& S) {\n    double a,b;\n    if ( qC.next() == NULL) {\n        S.println("The multiply command needs two arguments, none given.");\n        return;\n    } else {\n        a = atof(qC.current());\n    }\n    if ( qC.next() == NULL) {\n        S.println("The multiply command needs two arguments, only one given.");\n        return;\n    } else {\n        b = atof(qC.current());\n    }\n    S.printf("%e times %e is %e\\n",a,b,a*b);\n}\n')))}c.isMDXComponent=!0}}]);