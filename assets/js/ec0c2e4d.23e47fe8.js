(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{104:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return m}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var b=r.a.createContext({}),u=function(e){var t=r.a.useContext(b),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=u(e.components);return r.a.createElement(b.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,b=c(e,["components","mdxType","originalType","parentName"]),p=u(n),d=a,m=p["".concat(o,".").concat(d)]||p[d]||s[d]||i;return n?r.a.createElement(m,l(l({ref:t},b),{},{components:n})):r.a.createElement(m,l({ref:t},b))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var b=2;b<i;b++)o[b]=n[b];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},91:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return l})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return u}));var a=n(3),r=n(7),i=(n(0),n(104)),o={},l={unversionedId:"Software/DAC",id:"Software/DAC",isDocsHomePage:!1,title:"DAC",description:'The following functions are available for each of the 4 DAC channels. The "X" in the function name must be replaced by the channel number (1,2,3 or 4):',source:"@site/Quarto/Software/DAC.md",slug:"/Software/DAC",permalink:"/Quarto/Software/DAC",version:"current",sidebar:"quarto_main_sidebar",previous:{title:"ADC",permalink:"/Quarto/Software/ADC"},next:{title:"Triggers",permalink:"/Quarto/Software/Triggers"}},c=[{value:"writeDACX",id:"writedacx",children:[{value:"Example",id:"example",children:[]}]},{value:"writeDACRAWX",id:"writedacrawx",children:[{value:"Example",id:"example-1",children:[]}]},{value:"writeDAC",id:"writedac",children:[{value:"Example",id:"example-2",children:[]}]},{value:"writeDACRAW",id:"writedacraw",children:[{value:"Example",id:"example-3",children:[]}]}],b={toc:c};function u(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},b,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,'The following functions are available for each of the 4 DAC channels. The "X" in the function name must be replaced by the channel number (1,2,3 or 4):'),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#writedacx"},"writeDACX")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#writedacrawx"},"writeDACRAWX"))),Object(i.b)("p",null,"Additionally, the following general DAC functions are available as well. They take a DAC channel as an argument and take a few extra clock cycles to execute as they must parse the DAC channel."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#writedac"},"writeDAC")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#writedacraw"},"writeDACRAW"))),Object(i.b)("h2",{id:"writedacx"},"writeDACX"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-c"},"void writeDACX(double voltage);\nvoid writeDACX(float voltage);\n")),Object(i.b)("p",null,"This function writes a voltage to the DAC channel X. It takes either a float or a double as an input. (Technically, writeDACX is overcast with two functions, one that takes a double and one that takes a float as an argument, but this detail can be ignored.)"),Object(i.b)("p",null,"The function takes the following argument:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"strong"},"voltage")),"  The voltage to output on the DAC channel X. Values above +10V or below -10V will be coerced to +10V or -10V respectively. ")),Object(i.b)("h3",{id:"example"},"Example"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-c"},"IntervalTimer Timer; // instantiate a timer for setting the DAC update rate\ndouble voltage_pattern[] = {1.25,1.3,1.4534,2.453,2.6534,3,4,-2,-3.423} ;\n\nvoid setup() {\n  Timer.begin(ddsUpdate, 10); // update every 10 microseconds\n}\n\nvoid ddsUpdate() {  \n  static unsigned int position = 0; //store position in array\n  writeDAC1(voltage_pattern[position]);  // set DAC channel 1 to next value array\n  writeDAC2(-voltage_pattern[position]); // set DAC channel 2 to negative of next value in array\n  \n  position++; // Increment to next value in array\n  if ( position >= ( sizeof(voltage_pattern)/sizeof(voltage_pattern[0]) ) ) { \n      //reset positition when position equal to number of elements in voltage_pattern\n      position = 0;\n  }\n}\n")),Object(i.b)("h2",{id:"writedacrawx"},"writeDACRAWX"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-c"},"void writeDACRAWX(int16_t data);\n")),Object(i.b)("p",null,"This function writes a signed 16-bit integer to the DAC on channel X. "),Object(i.b)("p",null,"The function takes the following argument:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"strong"},"data"))," a signed 16-bit integer that is the raw data sent to the DAC.  The voltage on the DAC is equal to the integer value times 10.24 / 32768 = 3.125e-4. An integer value of 16,384 will output +5.12V. And value of -16,384 will output -5.12V.")),Object(i.b)("h3",{id:"example-1"},"Example"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-c"},"IntervalTimer Timer; // instantiate a timer for setting the DAC update rate\nint16_t voltage_pattern[] = {-23432,-10342,-5432,-43,543,1532,15342};\n\nvoid setup() {\n    Timer.begin(ddsUpdate, 10); // update every 10 microseconds\n}\n\nvoid ddsUpdate() {  \n    static unsigned int position = 0; //store position in array\n    writeDACRAW1(voltage_pattern[position]);  // set DAC channel 1 to next value array\n    writeDACRAW2(-voltage_pattern[position]); // set DAC channel 2 to negative of next value in array\n    \n    position++; // Increment to next value in array\n    if ( position >= ( sizeof(voltage_pattern)/sizeof(voltage_pattern[0]) ) ) { \n        //reset positition when position equal to number of elements in voltage_pattern\n        position = 0;\n    }\n}\n")),Object(i.b)("h2",{id:"writedac"},"writeDAC"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-c"},"void writeDAC(int channel, float voltage);\nvoid writeDAC(int channel, double voltage);\n")),Object(i.b)("p",null,"This function is identical to ",Object(i.b)("a",{parentName:"p",href:"#writedacx"},"writeDACX"),", except it takes an additional argument ",Object(i.b)("inlineCode",{parentName:"p"},"channel")," to set what DAC channel to update. "),Object(i.b)("p",null,"The function takes the following arguments:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"strong"},"channel"))," DAC channel to update. Valid values are 1, 2, 3 or 4."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"strong"},"voltage"))," The voltage to output on the DAC channel ",Object(i.b)("inlineCode",{parentName:"li"},"channel"),". Values above +10V or below -10V will be coerced to +10V or -10V respectively.  Type float or double is accepted.")),Object(i.b)("h3",{id:"example-2"},"Example"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-c"},"writeDAC(2,-4.562); //Write -4.562 volts to DAC channel 2\nwriteDAC(4,3.14); //Write 3.14 volts to DAC channel 4\n")),Object(i.b)("h2",{id:"writedacraw"},"writeDACRAW"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-c"},"void writeDACRAW(int channel, int16_t data);\n")),Object(i.b)("p",null,"  This function is identical to ",Object(i.b)("a",{parentName:"p",href:"#writedacrawx"},"writeDACRAWX"),", except it takes an additional argument ",Object(i.b)("inlineCode",{parentName:"p"},"channel")," to set what DAC channel to update. "),Object(i.b)("p",null,"  The function takes the following arguments:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"strong"},"channel"))," DAC channel to update. Valid values are 1, 2, 3 or 4."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"strong"},"data"))," A signed 16-bit integer that is the raw data sent to the DAC on channel ",Object(i.b)("inlineCode",{parentName:"li"},"channel"),".  The voltage on the DAC is equal to the integer value times 10.24 / 32768 = 3.125e-4. An integer value of 16,384 will output +5.12V. And value of -16,384 will output -5.12V. Values above +10V or below -10V will be coerced to +10V or -10V respectively. ")),Object(i.b)("h3",{id:"example-3"},"Example"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-c"},"int16_t data = 16384;\nwriteDACRAW(2,data); //Write 16,384 or 5.12V volts to DAC channel 2\ndata -= 24576;\nwriteDACRAW(4,data); //Write -8192 or -2.56 volts to DAC channel 4\n")))}u.isMDXComponent=!0}}]);