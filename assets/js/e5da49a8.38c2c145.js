(self.webpackChunkdoc_source=self.webpackChunkdoc_source||[]).push([[22],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return c}});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=i.createContext({}),d=function(e){var t=i.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=d(e.components);return i.createElement(p.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},g=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,p=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),g=d(n),c=a,m=g["".concat(p,".").concat(c)]||g[c]||s[c]||r;return n?i.createElement(m,l(l({ref:t},u),{},{components:n})):i.createElement(m,l({ref:t},u))}));function c(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,l=new Array(r);l[0]=g;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var d=2;d<r;d++)l[d]=n[d];return i.createElement.apply(null,l)}return i.createElement.apply(null,n)}g.displayName="MDXCreateElement"},322:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return o},metadata:function(){return p},toc:function(){return d},default:function(){return s}});var i=n(2122),a=n(9756),r=(n(7294),n(3905)),l=["components"],o={title:"Digital I/O"},p={unversionedId:"Software/Digital",id:"Software/Digital",isDocsHomePage:!1,title:"Digital I/O",description:"The Quarto has eight digital input and output pins, which can be utilized using standard Arduino\u2122 functions:",source:"@site/Quarto/Software/Digital.md",sourceDirName:"Software",slug:"/Software/Digital",permalink:"/Quarto/Software/Digital",version:"current",frontMatter:{title:"Digital I/O"},sidebar:"quarto_main_sidebar",previous:{title:"DAC",permalink:"/Quarto/Software/DAC"},next:{title:"Triggers",permalink:"/Quarto/Software/Triggers"}},d=[{value:"pinMode",id:"pinmode",children:[{value:"Example",id:"example",children:[]}]},{value:"digitalWrite",id:"digitalwrite",children:[{value:"Example",id:"example-1",children:[]}]},{value:"digitalToggle",id:"digitaltoggle",children:[{value:"Example",id:"example-2",children:[]}]},{value:"digitalRead",id:"digitalread",children:[{value:"Example",id:"example-3",children:[]}]}],u={toc:d};function s(e){var t=e.components,n=(0,a.Z)(e,l);return(0,r.kt)("wrapper",(0,i.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The ",(0,r.kt)("em",{parentName:"p"},"Quarto")," has eight digital input and output pins, which can be utilized using standard Arduino\u2122 functions:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#pinmode"},"pinMode")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#digitalwrite"},"digitalWrite")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#digitaltoggle"},"digitalToggle")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#digitalread"},"digitalRead"))),(0,r.kt)("h2",{id:"pinmode"},"pinMode"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"void pinMode(uint8_t pin, uint8_t mode);\n")),(0,r.kt)("p",null,"This function configures the input or output characteristics of a  digital pin. Pin should be an integer between 1 and 8, corresponding pins D1 through D8. The mode sets the pin to be either an input or an output and can also set the output type . By default, all triggers are inputs."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"mode"))," sets the input or output mode. Valid options are:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"em"},"OUTPUT")),": Standard output pin (3.3V CMOS push-pull)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"em"},"OUTPUT_OPENDRAIN")),": Open drain output"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"em"},"INPUT")),": Standard input (floating) "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"em"},"INPUT_PULLUP")),": Input with 22k pull up resistor"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"em"},"INPUT_PULLDOWN")),": Input with 100k pull down resistor")))),(0,r.kt)("h3",{id:"example"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"pinMode(1,OUTPUT);\npinMode(2,INPUT);\n")),(0,r.kt)("h2",{id:"digitalwrite"},"digitalWrite"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"void digitalWrite(uint8_t pin, uint8_t val);\n")),(0,r.kt)("p",null,"This function sets a digital output pin HIGH or LOW. Pin should be an integer between 1 and 8, corresponding pins D1 through D8. Val should be LOW (0) or HIGH (1). Unlike in many Arduino\u2122 systems, there is no need to use digitalWriteFast() for better speed performance as digitalWrite() has already been optimized for speed."),(0,r.kt)("h3",{id:"example-1"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"void setup() {\n    pinMode(1,OUTPUT);\n    pinMode(2,OUTPUT);\n}\n\nvoid loop() {\n    digitalWrite(1,HIGH);\n    digitalWrite(2,1); // same digitalWrite(2,HIGH);\n    digitalWrite(1,LOW); \n    digitalWrite(2,0); // same digitalWrite(2,LOW);\n}\n")),(0,r.kt)("h2",{id:"digitaltoggle"},"digitalToggle"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"void digitalToggle(uint8_t pin);\n")),(0,r.kt)("p",null,"This function toggles the state of a digital output pin HIGH or LOW. Pin should be an integer between 1 and 8, corresponding pins D1 through D8. Unlike in many Arduino\u2122 systems, there is no need to use digitalToggleFast() for better speed performance as digitalToggle() has already been optimized for speed."),(0,r.kt)("h3",{id:"example-2"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"void setup() {\n    pinMode(1,OUTPUT);\n    pinMode(2,OUTPUT);\n}\n\nvoid loop() {\n    digitalToggle(1);\n    digitalToggle(2);\n}\n")),(0,r.kt)("h2",{id:"digitalread"},"digitalRead"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"uint8_t digitalRead(uint8_t pin);\n")),(0,r.kt)("p",null,"The function returns a 0 if the digital input pin is low and returns 1 if the digital pin is high. Pin should be an integer between 1 and 8, corresponding pins D1 through D8. Unlike in many Arduino\u2122 systems, there is no need to use digitalReadFast() for better speed performance as digitalRead() has already been optimized for speed."),(0,r.kt)("h3",{id:"example-3"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"void setup() {\n    pinMode(1,INPUT);\n    pinMode(2,INPUT);\n    pinMode(3,OUTPUT);\n    pinMode(4,OUTPUT);\n}\n\nvoid loop() {\n    if ( digitalRead(1) ) {\n        //D1 is high\n        digitalWrite(3,LOW);\n    } else {\n        if (digitalRead(2) == LOW) {\n            //D1 and D2 low\n            digitalWrite(4,HIGH);\n        } else {\n            //D1 Low, D2 high\n            digitalWrite(4,LOW);\n        }\n    }\n}\n")))}s.isMDXComponent=!0}}]);