(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{117:function(e,t,o){"use strict";o.d(t,"b",(function(){return r})),o.d(t,"a",(function(){return n}));var a=o(0),i=o.n(a),n=function(e){var t=e.children,o=e.width,a=void 0===o?"6":o,n=e.align,r=void 0===n?"left":n;return i.a.createElement("div",{className:"col col--"+a+" text--"+r},t)},r=function(e){var t=e.children;return i.a.createElement("div",{className:"row"},t)}},118:function(e,t,o){"use strict";o.d(t,"a",(function(){return l})),o.d(t,"b",(function(){return r}));var a=o(4),i=o(0),n=o.n(i),r=function(e){var t=e.children;return n.a.createElement("div",{className:"baloo"},t)},l=function(e){var t=e.children;return n.a.createElement("div",{className:"baloo thick"},t)};n.a.Component},151:function(e,t,o){"use strict";o.r(t),t.default=o.p+"assets/images/bnc-s1-5ef6fae4b94e653c43db2e14ad0aa5ce.jpg"},152:function(e,t,o){"use strict";o.r(t),t.default=o.p+"assets/images/arduino-ide-s1-f2748ff0e91b85f4b568e20bbf43be55.png"},79:function(e,t,o){"use strict";o.r(t),o.d(t,"frontMatter",(function(){return l})),o.d(t,"metadata",(function(){return s})),o.d(t,"toc",(function(){return d})),o.d(t,"default",(function(){return u}));var a=o(3),i=o(7),n=(o(0),o(103)),r=(o(105),o(117)),l=(o(118),{id:"quarto",slug:"/",sidebar_label:"Overview",title:"qNimble Quarto A Digital Brain for the Analog World\u2122",hide_title:!0,hide_table_of_contents:!0,keywords:["DAC","ADC","data","acquisition","16bit","high-speed","speed","latency","servo","PID","PIID","filters","digital","analog","FPGA"],description:"qNimble Quarto is a high speed ADC DAC 16 bit analog to digital solution for filters, servos, PID loops and other applications."}),s={unversionedId:"quarto",id:"quarto",isDocsHomePage:!1,title:"qNimble Quarto A Digital Brain for the Analog World\u2122",description:"qNimble Quarto is a high speed ADC DAC 16 bit analog to digital solution for filters, servos, PID loops and other applications.",source:"@site/quarto/quarto.mdx",slug:"/",permalink:"/quarto/",version:"current",sidebar_label:"Overview",sidebar:"quarto_main_sidebar",next:{title:"specifications",permalink:"/quarto/specifications"}},d=[{value:"How does the <em>qNimble Quarto</em> work?",id:"how-does-the-qnimble-quarto-work",children:[]},{value:"Why Create the qNimble Quarto?",id:"why-create-the-qnimble-quarto",children:[]},{value:"I thought Arduino\u2122 was slow",id:"i-thought-arduino-was-slow",children:[]}],c={toc:d};function u(e){var t=e.components,l=Object(i.a)(e,["components"]);return Object(n.b)("wrapper",Object(a.a)({},c,l,{components:t,mdxType:"MDXLayout"}),Object(n.b)("h1",{id:"qnimble-quarto-a-digital-brain-for-the-analog-world"},Object(n.b)("em",{parentName:"h1"},"qNimble Quarto"),": A Digital Brain for the Analog World\u2122"),Object(n.b)("p",null,"The ",Object(n.b)("em",{parentName:"p"},"qNimble Quarto")," multi-function ",Object(n.b)("strong",{parentName:"p"},"data")," acquisition platform that is easy to use, but incredibly powerful. Low latency, 1 MSPS, 16 bit-ADC and DAC directly accessible with a blazing fast 500 MHz CPU dedicated to running your code. The CPU can read and write analog signals in just a few clock cycles. Arduino\u2122-compatible, so you can program the Quarto in the Arduino IDE or your favorite C/C++ environment. Build a servo control system or digital filters with just a few lines of code. What will you build?"),Object(n.b)("h2",{id:"how-does-the-qnimble-quarto-work"},"How does the ",Object(n.b)("em",{parentName:"h2"},"qNimble Quarto")," work?"),Object(n.b)(r.b,{mdxType:"Row"},Object(n.b)(r.a,{mdxType:"Column"},Object(n.b)("p",null,Object(n.b)("img",{alt:"img",src:o(151).default}))),Object(n.b)(r.a,{mdxType:"Column"},Object(n.b)("p",null,"We combined high-speed, low-latency 16-bit DAC and ADC hardware with a blazing fast CPU and an FPGA. The FPGA handles all the communication with the DAC and ADC and is designed to maximize the speed of the CPU by enabling the CPU to read or write analog signals in a few as 2 clock cycles.  And we\u2019ve designed everything to have low latency (~1us) to support high bandwidth servoing and filtering so you can respond to your data quickly. With hardware support for floating point math and 100ns interrupt response times, you get the power of an FPGA but the ease of use of an Arduino."))),Object(n.b)("h2",{id:"why-create-the-qnimble-quarto"},"Why Create the qNimble Quarto?"),Object(n.b)(r.b,{mdxType:"Row"},Object(n.b)(r.a,{width:"7",mdxType:"Column"},"We didn\u2019t like the options for high-speed analog input and output devices, especially when you wanted low latency or quick response times (for high servo bandwidths).",Object(n.b)("p",null,"Arduino\u2122 devices give you excellent control, but typically have low-resolution DAC and ADC\u2019s and even Analog shields  have slow (millisecond) update speeds. Data acquisition hardware is often USB-based, so latency is very large and loops times very long. Other solutions relied on purchasing expensive dedicated hardware (compactRIO, PXIcontroller) in addition to analog input / output modules and specialized software.  And for low latency, these and other solutions required programming an FPGA, which is complex with a steep learning curve and slow compile greatly slow down the speed of development.  We wanted something simple and affordable yet powerful. That\u2019s the qNimble Quarto")),Object(n.b)(r.a,{width:"5",align:"right",mdxType:"Column"},Object(n.b)("p",null,Object(n.b)("img",{alt:"img",src:o(152).default})))),Object(n.b)("h2",{id:"i-thought-arduino-was-slow"},"I thought Arduino\u2122 was slow"),Object(n.b)(r.b,{mdxType:"Row"},Object(n.b)(r.a,{mdxType:"Column"},Object(n.b)("p",null,"Arduino has a reputation for being slow. But it doesn\u2019t have to be that way. Fundamentally Arduino compiles C / C++ code which can be written to be very efficient. Arduino code is often slow because:"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},"Functions written to have compatibility across diverse hardware at the expense of speed."),Object(n.b)("li",{parentName:"ul"},"Many Arduino\u2019s use basic 8-bit micro-controllers running at low (~10MHz) speeds."),Object(n.b)("li",{parentName:"ul"},"Interfacing to external components such as ADC and DAC often use slow protocols like I2C and/or waste processor time waiting and polling for communications operation to complete.")))))}u.isMDXComponent=!0}}]);